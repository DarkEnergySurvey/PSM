----------------
Scripts for PSM:
----------------
extractfromcat.py
extractfromstdcat.py
matchsort.py
psm.py
psmQA.py

----------------
To run:
----------------
Need the following in your PYTHONPATH:
$DESPHOTOSTDSMOD_HOME/pyPSM/python
python 2.7
numpy 1.6
pyfits 3.0
matplotlib 1.2 (only for psmQA.py)

For example, on des20.fnal.gov (based heavily on Brian's instructions):

    set up pythom 2.7, numpy 1.6, pyfits 3.0:
    % cd /data/des20.a/data/yanny/gframe
    % bash
    % source ./DES_HOME/bin/setup_runB.sh .

    set up pyPSM:
    % export DESPHOTOSTDSMOD_HOME=/usrdevel/dp0/dtucker/DESDM/PSM
    % export PYTHONPATH=${DESPHOTOSTDSMOD_HOME}/pyPSM/python:${PYTHONPATH}
    % export PATH=${DESPHOTOSTDSMOD_HOME}/pyPSM/python:${PATH}
 
    set up matplotlib 1.2 (needed by psmQA.py):
    % export PYTHONPATH=${PYTHONPATH}:/usrdevel/dp0/dtucker/matplotlib-1.2.0/build/lib.linux-x86_64-2.7

    change directory to your processing directory; e.g.:
    % cd cd /data/des20.a/data/dtucker/pyPSMtests/20130221-test


    There are four python scripts here which do the PSM.

    1. extractfromstdcat.py (extracts from a FITS file of STD stars)

    It can be used as so:

    % extractfromstdcat.py $DESPHOTOSTDSMOD_HOME/pyPSM/data/standard_stars_all_id4.fits 0 360 -3 3 eqstds.csv

    This says go thru the FITS file 'standard_stars_all_id4.fits'
    and pick out all objects with 0 < RA < 360 -3 < DEC < 3 (i.e.
    stick to the equator) and put them into a 'python PSM ready 
    format .csv file' called eqstds.csv.

    % head eqstds.csv
    0.000266,-1.03429,19.8521,17.61,16.6398,16.296,16.104,16.0195
    0.001931,0.525311,18.8984,17.563,17.0445,16.8616,16.7892,16.8144
    0.002258,-0.950035,18.2086,17.2266,16.9293,16.8213,16.7962,16.8744
    0.002368,0.424984,16.9773,15.7902,15.3822,15.2313,15.1901,15.2309
    0.002778,1.202977,19.0108,17.5353,16.9633,16.7601,16.6427,16.6714
    ....

    [Eventually, this step#1 could be replaced by a select from the database STANDARD_STARS table]


    2.  extractfromcat.py

        Format:
        extractfromcat.py dataroot pipeline attempt explist(or all) ralo rahi declo dechi classstarcut flaglimit outfile

        This is used for sweeping through a bunch of (say) equatorial
        Dec~0 exposures from a given night.

        For example, one can use this on Brian's standalone processing of 
        nite=20130221 (the night with Omega Cen):

        % extractfromcat.py /data/des20.b/data/DTS/dst/2013/2/21 final 1 all 0 360 -3 3 0.0 3 mystars.csv

        The above command will go thru all the exposures taken the
        night of 20130221 [that have been processed with standalone]
        and extract the stars with class_star > 0.0, flags <= 3 and
        0 < RA < 360, -3 < DEC < 3 [for their center coord]
        and puts the extracted stars into 'mystars.csv'
        This takes a while....

    3.  matchsort.py

        % matchsort.py eqstds.csv mystars.csv matchemup.csv

        This matches the stds to the DECam stars and
        puts the matched lines in matchemup.csv

        It's very fast!

    4.  Do the solution...

        % psm.py matchemup.csv solve_g 1 4 0.1 --bsolve --ksolve --verbose 3

        where matchemup.csv is the matched list
        solve_g is the name of the output file
        1 is the number of the filter to solve for [012345] = [ugrizY]
        4 is the number of iterations
        0.1 is the outlier rejection threshold
        --bsolve is a toggle to tell psm.py to solve for the b coefficients
        --ksolve is a toggle to tell psm.py to solve for the k coefficient
        --verbose 3 throttles the amount of output to the screen (0=default, 1=some ouput, 2=more, ...)


        % head solve_g

        niter_g 4
        thresholdit_g 0.1000
        n_g 2519
        dof_g 2402
        rms_g 0.0251
        chisq_g 1.2535
        k_g 0.174 +/- 0.001
        a_g 1 -25.394
        a_g 2 -25.353
        a_g 3 -25.339
        a_g 4 -25.286
        a_g 5 -25.285
        ...

        Run it 6 times changing solve_g to solve_u and 1 --> 0,
        etc, thru solve_Y 5.
        Then you have the solutions in the solve_[filter] files.

        In addition to solve_[filter] files, these files are 
        generated by psm.py:
        
        matchemup.csv.[filter].res.csv - this is the table of residuals to the solution (use by psmQA.py below).
        matchemup.csv.[filter].fit     - this is a FITS table of the psm solution that has the same schema 
                                         as the PSMFIT table in the NCSA database.


    5.  Generate QA plots

        % psmQA.py matchemup.csv.g.res.csv

          where matchemup.csv.g.res.csv is the residuals table output
                by psm.py above.

          The plots currently generated are the following:
          PSM_QA_res_vs_airmass.png
          PSM_QA_res_vs_mag.png
          PSM_QA_res_vs_color.png
          PSM_QA_res_vs_ccd.png
          PSM_QA_res_vs_expnum.png

